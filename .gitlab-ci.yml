stages:
  - build
  - test
  - deploy
  - cleanup
  - github_publish

build_jar:
  stage: build
  script:
    - START_BUILD_DATE=$(date +%Y%m%d%H%M%S)
    - docker build -t builder-$CI_PROJECT_NAME .
    - docker run --name deployment -d builder-$CI_PROJECT_NAME /bin/bash
    - mkdir workspace
    - docker export --output="workspace/deployment.tar" deployment
    - tar -xf workspace/deployment.tar --wildcards -C workspace '*sruv-*.jar'
    - find workspace -name 'sruv-*.jar' -exec mv {} $PWD/sruv-${CI_BUILD_REF:0:10}-$START_BUILD_DATE.jar \;
    - docker rm deployment

test_jar:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - \[ -s sruv*.jar \] || echo "The jar file does not exist or is empty"

deploy_jar:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Deploying artifact..."
    - "echo UPSTREAM_CI_BUILD_ID=$CI_BUILD_ID >> variables.lst"
  artifacts:
    paths:
    - sruv*.jar

clean_environment:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "Trigger dockerizing the SRUV App..."
    - source variables.lst
    - "curl -X POST -F token=$TOKEN2TRIGGER_DOCKER_SRUV_CORE -F ref=master -F variables[UPSTREAM_CI_PROJECT_ID]=$CI_PROJECT_ID -F variables[UPSTREAM_CI_BUILD_ID]=$UPSTREAM_CI_BUILD_ID https://gitlab.ds.pg.gda.pl/api/v3/projects/$DOCKER_SRU_CORE_CI_PROJECT_ID/trigger/builds"
  script:
    - echo "Cleaning the environment"
    - rm -rf workspace sru*.jar *.lst
  dependencies: []

publish_master_on_github:
  stage: github_publish
  script:
    - git checkout master
    - git pull origin master
    - git remote set-url origin $GITHUB_REPO_URL
    - if [ `grep -c github.com ~/.ssh/known_hosts` -eq 0 ]; then ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts; fi
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GITHUB_SSH_KEY")
    - git push origin master &&  ssh-agent -k || { ssh-agent -k ; exit 1}
  allow_failure: true
  only:
    - master
    - SRUV-45
